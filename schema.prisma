generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  name          String
  role          Role           @default(USER)
  bookings      Booking[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  // updatedAt DateTime @updatedAt
  Session       Session[]
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model TrainingSession {
  id        Int       @id @default(autoincrement())
  timeSlot  String
  capacity  Int       @default(0)
  // maxCapacity  Int       @default(6)
  date      DateTime
  bookings  Booking[]
  createdAt DateTime  @default(now())
  userId    Int?
}

model SessionBooking{
  trainingSessionId Int
  bookingId Int
  createdAt DateTime  @default(now())
}

model Booking {
  id           Int             @id @default(autoincrement())
  userId       Int
  sessionId    Int
  status       String          @default("booked") // "booked", "canceled", "rejected"
  user         User            @relation(fields: [userId], references: [id])
  session      TrainingSession @relation(fields: [sessionId], references: [id])
  createdAt    DateTime        @default(now())
  trainingDate DateTime
  // updatedAt DateTime @updatedAt
}

model Notification {
  id      Int      @id @default(autoincrement())
  userId  Int
  message String
  sentAt  DateTime
  user    User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
}

enum Role {
  USER
  SALES_USER
  ADMIN
  SUPERADMIN
}
